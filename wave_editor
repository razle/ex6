from wave_helper import *
from scipy.io import wavfile
import numpy as np
import math


def reverse_sound(audio_data):
    """
    a function that gets the audio-data list and reverse it
    """
    return audio_data[::-1]


def speed_sound(audio_data):
    """
    a function that change the audio data and turn the tune speed up.
    returns a new list
    """
    result_list = []
    for i in range(len(audio_data)):
        if i % 2 == 0:
            result_list.append(audio_data[i])
    return result_list


def slow_sound(audio_data):
    """
    a function that change the audio data and turn the tune speed up.
    returns a new list
    """
    result_list = []
    i = 0
    while i < (len(audio_data)-1):
        result_list.append(audio_data[i])
        avg_1 = ((audio_data[i][0] + audio_data[i+1][0]) // 2)
        avg_2 = ((audio_data[i][1] + audio_data[i+1][1]) // 2)
        result_list.append([avg_1, avg_2])
        i += 1
    result_list.append(audio_data[-1])
    return result_list


def volume_up(audio_data):
    """
    a function that returns the audio data after turning up the volume
    """

def volume_down(audio_data):
    """
    a function that returns the audio data after turning down the volume
    """
    result_list = []
    for i in audio_data:
        result_list.append([int((i[0] / 1.2)), int((i[1 ] / 1.2))])
    return result_list


def dimming_sound(audio_data):
    """
    a function that returns the audio data after dimming it.
    """


def merging_two_files(audio_data_1, audio_data_2):
    """
    a function that gets 2 audio files and merge them together.
    """


def making_new_tune(melody):
    """
    a function that gets a melody, and creates an audio data list out of it.
    """
